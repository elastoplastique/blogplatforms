import fs from 'fs';
import path from 'path';
import { JSON_DATA_DIR, META_FILE_NAME } from '@/constants/content'

function readFile(filePath: string) {
      return fs.readFileSync(filePath, 'utf-8');
}

// type generated by Collections-app
type CollectionDocumentFieldsType = {
  id: string,
  name: string,
  type: string,
}

type JsonSchemaPropertyType = {
  [key: string]: { type: string, items?: { type: string }}
}

// type expected from "import { FromSchema } from "json-schema-to-ts";" 
type TypeMetadata = {
  type: string,
  properties: JsonSchemaPropertyType,
  required: string[],
}
function typeSwitcher(type: string): {type: string, items?: {type: any} } {
  switch (type) {
    case "bool":
      return {type: "boolean"};
    case "number":
      return {type: "number"};
    case "string":
      return {type: "string"};
    case "date":
      return {type:"string"};
    case "array":
      return {type: "array", items: {type: "string"}};
    default:
      return {type: "string"};
  }
}

function getCollectionDocumentsTypeMetadata(directory: string): CollectionDocumentFieldsType[] {
  const collectionDocumentsMetadata = JSON.parse(readFile(directory));
  if (collectionDocumentsMetadata) {
    return collectionDocumentsMetadata.fields;
  }
  return []
}

// convert collection documents metadata to a specific schema that can be used
// with json-schema-to-ts library: https://github.com/ThomasAribart/json-schema-to-ts
function convertCollectionDocumentsMetadataToSchema(collectionDocumentsTypeMetadata: CollectionDocumentFieldsType[]): TypeMetadata {
  const typeMetadata  = {
    type: "object",
    properties: {},
    required: []
  } as TypeMetadata;
  collectionDocumentsTypeMetadata.forEach((fieldType: CollectionDocumentFieldsType) => {
    typeMetadata["properties"][fieldType.name] = typeSwitcher(fieldType.type);
  })
  return typeMetadata;
}

export type {
  CollectionDocumentFieldsType,
  JsonSchemaPropertyType,
  TypeMetadata
}

export {
  getCollectionDocumentsTypeMetadata,
  convertCollectionDocumentsMetadataToSchema
}